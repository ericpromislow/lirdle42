<%
  game_state ||= @game_state
  guesses = @other_state.guesses
  lastGuess = guesses[-1]
  lastGuessWord = lastGuess.word
  scores = guesses[-1].score.split(':').map(&:to_i)
  colors = %w[grey yellow green]
  num_rows = [guesses.size + 1, 6].max
  @BG_WHITE = 'bg-white'
  @BG_YELLOW = 'bg-warning' # Should be --var(yellow)
  @BG_GREEN = 'bg-success' # Should be --var(green)
  @BG_BLUE = 'bg-info' # was rgb(189, 213, 234) in lirdle
  @keyboard_colors = Hash.new(@BG_WHITE)
  case num_rows
  when 0...13
    letterBoxSizeClassName = "small1"
  when 13...19
    letterBoxSizeClassName = "small2"
  when 19...25
    letterBoxSizeClassName = "small3"
  else
    letterBoxSizeClassName = "small4"
  end
  letterBoxClassListArrayBase = ['letter-box', 'filled-box', letterBoxSizeClassName]
%>
<div class="row">
  <div class="col-md-6">
    <div class="row">
      <div class="col-md-12">
<!--        <h2>Time to pick A Lie</h2>-->
        <div class="h2 uppercase">Time to pick a lie</div>
      </div>
    </div>
    <div class="row">
      <div class="col-md-10">
        <p>Click the circle under one of the colored squares to change the color
        that your opponent will see.
        </p>
      </div>
    </div>

<div class="row targetWord">
  <div class="col-md-12">
    <p>Target word: <b><%= game_state.finalWord %></b></p>
  </div>
</div>
<div class="row currentGuess">
  <div class="col-md-12">
    <p>Their current guess: <b><%= lastGuessWord %></b></p>
  </div>
</div>

<%= form_with(model: game_state, remote: true) do |f| %>
  <%= hidden_field_tag :lie, "" %>
  <%= hidden_field_tag :game_state_id, game_state.id %>
  <div class="row">
    <div class="col-md-12">
      <div class="letter-row-container">
        <table class="table table-condensed">
          <% %w/grey yellow green/.each_with_index do |other_color, row_num| %>
            <tr>
            <% 5.times do |col_num| %>
            <td class="lie-picker">
              <% letter_color = colors[scores[col_num]]
              if letter_color != other_color
                value = "#{col_num}:#{scores[col_num]}:#{row_num}:#{other_color}"
                %>
                <label for="lie_#{value}">
                  <div class="letter-box filled-box background-<%= other_color %>">
                    <span>&nbsp;</span>
                  </div>
                </label>
                <%= f.radio_button(:lie, value) %>
              <% else
                bgColor = "background-#{ letter_color }" %>
                <div class="letter-box filled-box <%= bgColor %>">
                  <span><%= lastGuessWord[col_num].downcase %></span>
                </div>
              <% end %>
            </td>
            <% end %>
            </tr>
          <% end %>
        </table>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col-xs-4">
    <%= f.submit "Submit Lie", class: "btn btn-primary" %>
    </div>
    <div class="col-xs-8"></div>
  </div>
</div>
<% end %>
<div class="row">
  <div class="col-md-6">
    <% if guesses.size > 1 %>
    <%= render 'games/previous_guesses' %>
    <% else %>
    This is their first guess.
    <% end %>
  </div>
</div>

<script type="text/javascript">
  console.log("QQQ: Hey we've got scripting in _show4!");
  let submitButton = null;
  let lieField = null;

  function radioButtonChanged(event) {
    if (!submitButton) {
      return;
    }
    lieField.value = event.target.value;
    submitButton.disabled = false;
  }

  $(document).ready(() => {
    try {
      submitButton = document.querySelector('form input[type="submit"]');
      if (!submitButton) {
        debugger;
      }
      submitButton.disabled = true;
      lieField = document.querySelector('form input#lie');
      const buttons = document.querySelectorAll('input[name="game_state[lie]"]');
      buttons.forEach((button) => {
        button.addEventListener('change', radioButtonChanged);
      });
    } catch(ex) {
      console.log(`Problem in startup: ${ ex }`);
      console.error(ex);
    }
  });
</script>
