<%
  # other_player ||= @other_player
  game_state ||= @game_state
  # user ||= @user
  guesses = game_state.guesses
  colors = %w[grey yellow green]
  num_rows = [guesses.size + 1, 6].max
  case num_rows
  when 0...13
    letterBoxSizeClassName = "small1"
  when 13...19
    letterBoxSizeClassName = "small2"
  when 19...25
    letterBoxSizeClassName = "small3"
  else
    letterBoxSizeClassName = "small4"
  end
  letterBoxClassListArrayBase = ['letter-box', 'filled-box', letterBoxSizeClassName]
%>
<div class="row">
  <div class="col-md-12">
    <h2>Lirdle42: One Handcrafted Lie Per Line</h2>
  </div>
</div>

<div class="row">
  <div class="col-md-12">
    <div id="game-board">
      <% (0...guesses.size).to_a.each do |row_num| %>
        <%
          guess = guesses[row_num]
          scores = guess.score.split(':').map(&:to_i)
          # debugger
          liePosition = guess.liePosition
          lieColor = guess.lieColor
        %>
        <div class="letter-row-container">
          <div class="letter-row">
            <% 5.times do |col_num| %>
              <%
                letterIndex = liePosition == col_num ? lieColor : scores[col_num]
                letterColor = colors[letterIndex]
                bgColor = "background-#{ letterColor }"
                letterBoxClassListArray = letterBoxClassListArrayBase + [bgColor]
                letterBoxClassList = letterBoxClassListArray.join(" ")
              %>
              <div class="<%= letterBoxClassList %>"><%= guesses[row_num].word[col_num].downcase %></div>
            <% end %>
          </div>
        </div>
      <% end %>
      <% next_guess_posn = guesses.size %>
      <% if !game_state.pending_guess.blank?
        next_guess_posn += 1
        pending_letters = game_state.pending_guess.split('')
        pending_letters += [''] * (5 - pending_letters.size)
      %>
        <div class="letter-row-container">
          <div class="letter-row">
            <% pending_letters.each do |c|
            if !c.blank? %>
              <div class="<%= letterBoxClassListArrayBase.join(' ') %>"><%= c %></div>
            <% else %>
              <div class="letter-box <%= letterBoxSizeClassName %>"></div>
            <% end %>
          <% end %>
          </div>
        </div>
      <% end %>
      <% (next_guess_posn...num_rows).to_a.each do  %>
        <div class="letter-row-container">
          <div class="letter-row">
            <% 5.times do  %>
              <div class="letter-box <%= letterBoxSizeClassName %>">

              </div>
            <% end %>
          </div>
        </div>
      <% end %>
    </div>
  </div>
</div>
<div class="row">
  <div class="col-md-4 col-md-offset-4">
    <%= form_with(url: guesses_path, scope: :game_state, local: true) do |f| %>
      <%= hidden_field_tag :word, "splibitch" %>
      <%= hidden_field_tag :game_state_id, game_state.id %>
      <%= f.submit "Submit Guess", class: "btn btn-primary" %>
    <% end %>
  </div>
</div>

<div id="keyboard-cont">
  <div id="dupWord" class="wordProblemPrompt hidden"><span>You already tried "</span><span id="dupWordContents"></span><span>"</span></div>
  <div id="fiveGreenFakeOut" class="wordProblemPrompt hidden"><span>Congratulations on getting a Fake Out! You're close but that's not the right word.</span><br /></div>
  <div class="first-row">
    <button class="keyboard-button" type="button">q</button>
    <button class="keyboard-button" type="button">w</button>
    <button class="keyboard-button" type="button">e</button>
    <button class="keyboard-button" type="button">r</button>
    <button class="keyboard-button" type="button">t</button>
    <button class="keyboard-button" type="button">y</button>
    <button class="keyboard-button" type="button">u</button>
    <button class="keyboard-button" type="button">i</button>
    <button class="keyboard-button" type="button">o</button>
    <button class="keyboard-button" type="button">p</button>
  </div>
  <div class="second-row">
    <button class="keyboard-button" type="button">a</button>
    <button class="keyboard-button" type="button">s</button>
    <button class="keyboard-button" type="button">d</button>
    <button class="keyboard-button" type="button">f</button>
    <button class="keyboard-button" type="button">g</button>
    <button class="keyboard-button" type="button">h</button>
    <button class="keyboard-button" type="button">j</button>
    <button class="keyboard-button" type="button">k</button>
    <button class="keyboard-button" type="button">l</button>
  </div>
  <div class="third-row">
    <button class="keyboard-button" type="button">Del</button>
    <button class="keyboard-button" type="button">z</button>
    <button class="keyboard-button" type="button">x</button>
    <button class="keyboard-button" type="button">c</button>
    <button class="keyboard-button" type="button">v</button>
    <button class="keyboard-button" type="button">b</button>
    <button class="keyboard-button" type="button">n</button>
    <button class="keyboard-button" type="button">m</button>
    <button class="keyboard-button" type="button">Enter</button>
  </div>
</div>

<script type="text/javascript">
  console.log("QQQ: Hey we've got scripting in _show2!");
  var NEUTRAL_COLOR = 'white';
  var submitButton = null;
  var wordField = null;

  function Model(view) {
      this.view = view;
  }
  Model.prototype = {
      initialize() {
          this.initState();
      },
      setGameStateID(gameStateID) {
        console.log(`QQQ: Setting gameStateID=${ gameStateID }`);
        this.gameStateID = gameStateID;
      },
      initState() {
          const pending_guess = "<%= game_state.pending_guess.blank? ? '' : game_state.pending_guess %>";
          this.currentGuess = pending_guess.split('');
          this.guessCount = <%= game_state.guesses.size %>;
          this.nextLetterPosition = pending_guess.length;
      },
      deleteLetter() {
          if (this.currentGuess.length === 0) {
              return;
          }
          this.view.deleteLetter(this.guessCount, this.nextLetterPosition - 1);
          this.currentGuess.pop();
          this.nextLetterPosition -= 1;
          if (this.nextLetterPosition === 4) {
              if (this.isInvalidWord) {
                  this.isInvalidWord = false;
                  this.view.changeInvalidWordState(this.guessCount, false);
                  submitButton.disabled = true;
              }
          }
          const gameStateID = this.gameStateID;
          const guessString = this.currentGuess.join('');
          $.ajax({
            url: `/game_states/${ gameStateID }.json?pending_guess=${ guessString }`,
            type: 'PATCH',
            failure: (result) => {
              console.log(`QQQ: PATCH /game_state?id=${ gameStateID }&pending_guess=${ guessString } on insert failed => ${ result }`,  result);
            },
          });
      },
      insertLetter(pressedKey) {
        // debugger;
          const rowNum = this.guessCount;
          const colNum = this.nextLetterPosition;
          this.view.insertLetter(pressedKey, rowNum, colNum);
          this.currentGuess.push(pressedKey);
          this.nextLetterPosition += 1;
          const gameStateID = this.gameStateID;
          const guessString = this.currentGuess.join('');
          $.ajax({
            url: `/game_states/${ gameStateID }.json?pending_guess=${ guessString }`,
            type: 'PATCH',
            failure: (result) => {
              console.log(`QQQ: PATCH /game_state?id=${ gameStateID }&pending_guess=${ guessString } on insert failed => ${ result }`,  result);
            },
          });
          if (this.nextLetterPosition === 5) {
              $.ajax({
                  url: `/is_valid_word.json?word=${guessString}`,
                  type: 'GET', // NEEDED?
                  success: (result) => {
                      console.log(`QQQ: is_valid_word(${guessString}) succeeded => ${ result }`,  result);
                      if (!result.status) {
                        console.log(`QQQ:Not a valid word`);
                        submitButton.disabled = true;
                        return;
                      }
                      console.log(`QQQ: It's valid, verify it's not a duplicate`);
                      $.ajax({
                          url: `/is_duplicate_guess.json?word=${guessString}&id=${ gameStateID }`,
                          success(result2) {
                            console.log(`QQQ: is_duplicate_guess(${guessString}) succeeded => ${ result2 }`,  result2);
                            submitButton.disabled = result2.status;
                            if (!result2.status) {
                              wordField.value = guessString;
                            }
                          },
                          failure(result2) {
                            console.log(`QQQ: is_duplicate_guess(${guessString}) failed => ${ result2 }`,  result2);
                              this.isInvalidWord = true;
                              this.view.changeInvalidWordState(this.guessCount, true, '');
                          }
                      });
                  },
                  failure: (result) => {
                    console.log(`QQQ: is_valid_word(${guessString}) failed => ${ result }`,  result);
                      this.isInvalidWord = true;
                      this.view.changeInvalidWordState(this.guessCount, true, guessString);
                  }
              });
          }
      },
  };
  function View() {
      this.board = document.getElementById("game-board");
      this.dupWord = document.getElementById("dupWord");
      for (const elem of document.getElementsByClassName("keyboard-button")) {
          elem.style.backgroundColor = NEUTRAL_COLOR;
      }
      this.model = null;
      this.wordIsInvalid = false;
      this.gameFinished = false;
  }
  View.prototype = {
      setModel(model) {
          this.model = model;
      },
      handleLetterBoxClick(e) {
          if (this.gameFinished) {
              e.stopPropagation();
              e.preventDefault();
              return;
          }
          const target = e.target;
          if (!target.classList.contains('filled-box')) {
              return;
          }
          if (target.classList.contains('show-lie')) {
              target.classList.remove('show-lie');
              target.classList.add('show-perceived-truth');
          } else if (target.classList.contains('show-perceived-truth')) {
              target.classList.remove('show-perceived-truth');
          } else {
              // We avoid constraints on number of marked letters
              // due to complexity and individual preferences
              target.classList.add('show-lie');
          }
          e.preventDefault();
      },
      changeInvalidWordState(rowNum, wordIsInvalid, guessString) {
          if (this.wordIsInvalid !== wordIsInvalid) {
              if (!this.wordIsInvalid) {
                  this.markCurrentWordInvalid(rowNum);
                  if (guessString) {
                      this.dupWord.querySelector('#dupWordContents').textContent = guessString;
                      this.dupWord.classList.remove('hidden');
                      this.dupWord.classList.add('show');
                  }
              } else {
                  this.markCurrentWordValid(rowNum);
                  this.dupWord.classList.remove('show');
                  this.dupWord.classList.add('hidden');
              }
              this.wordIsInvalid = wordIsInvalid;
          }
      },

      showInvalidWordPrompt(promptID) {
          const elt = document.getElementById(promptID);
          if (elt) {
              elt.classList.remove('hidden')
              elt.classList.add('show');
          }
      },

      clearInvalidWordPrompt(promptID="") {
          const elts = promptID ? [document.getElementById(promptID)] : Array.from(document.querySelectorAll('div.wordProblemPrompt.show'));
          for (const elt of elts) {
              if (elt) {
                  elt.classList.remove('show')
                  elt.classList.add('hidden');
              }
          }
      },

      markCurrentWordInvalid(rowNum) {
          const row = this.board.querySelectorAll(".letter-row-container").item(rowNum).querySelector(".letter-row");
          for (let i = 0; i < 5; i++) {
              const box = row.childNodes[i];
              box.classList.add('invalid');
          }
      },

      markCurrentWordValid(rowNum) {
          const row = this.board.querySelectorAll(".letter-row-container").item(rowNum).querySelector(".letter-row");
          for (let i = 0; i < 5; i++) {
              const box = row.childNodes[i];
              box.classList.remove('invalid');
          }
      },

      deleteLetter(rowNum, colNum) {
          let row = document.getElementsByClassName("letter-row")[rowNum];
          let box = row.children[colNum];
          box.textContent = "";
          box.classList.remove("filled-box", "show-lie", "show-perceived-truth");
      },

      insertLetter(pressedKey, rowNum, colNum) {
          pressedKey = pressedKey.toLowerCase();

          let row = document.getElementsByClassName("letter-row")[rowNum];
          let box = row.children[colNum];
          box.textContent = pressedKey;
          box.classList.add("filled-box");
      },

      shadeKeyboard(letter, color, guessIt, numHitsForEachScore) {
          for (const elem of document.getElementsByClassName("keyboard-button")) {
              if (elem.textContent === letter) {
                  if (guessIt) {
                      elem.style.backgroundColor = color;
                  } else if (numHitsForEachScore[2]) {
                      //TODO: Gradient these
                      elem.style.backgroundColor = "var(--green)";
                  } else if (numHitsForEachScore[1]) {
                      elem.style.backgroundColor = "var(--yellow)";
                  } else if (numHitsForEachScore[0]) {
                      elem.style.backgroundColor = "#bdd5ea";
                  }
                  break;
              }
          }
      },

      shadeKeyboard(letter, color, guessIt, numHitsForEachScore) {
          for (const elem of document.getElementsByClassName("keyboard-button")) {
              if (elem.textContent === letter) {
                  if (guessIt) {
                      elem.style.backgroundColor = color;
                  } else if (numHitsForEachScore[2]) {
                      //TODO: Gradient these
                      elem.style.backgroundColor = "var(--green)";
                  } else if (numHitsForEachScore[1]) {
                      elem.style.backgroundColor = "var(--yellow)";
                  } else if (numHitsForEachScore[0]) {
                      elem.style.backgroundColor = "#bdd5ea";
                  }
                  break;
              }
          }
      },

      keyHandler(e) {
          // console.log('>> keyup');
          const pressedKey = String(e.key);
          if (pressedKey === "Backspace" || pressedKey === "Del") {
              if (this.model.nextLetterPosition !== 0) {
                  this.model.deleteLetter();
                  console.log(`lirdle: ignoring backspace at position 0`)
              }
          } else if (pressedKey.toLowerCase() === "enter") {
              // console.log(`pressed enter, currentTarget: ${e.currentTarget}, target: ${e.target}`);
              e.stopPropagation();
              e.cancelBubble = true;
              if (this.wordIsInvalid) {
                  // Otherwise do nothing -- there's a line that we're on an invalid word
                  return;
              } else if (this.model.nextLetterPosition < 5) {
                  console.log(`lirdle: ignoring return before full word is typed`);
                  return;
              }
              submitButton.click();
          } else if (pressedKey.match(/^[a-z]$/i)) {
              if (this.model.nextLetterPosition < 5) {
                  this.model.insertLetter(pressedKey.toLowerCase());
              }
              // Otherwise do nothing -- there's a line that we're on
              // an invalid word
          } else {
              console.log(`Lirdle: ignoring key event ${pressedKey}`);
          }
      },
      sanitize(txt) {
          return txt.trim()
              .replace('&', '&amp;')
              .replace('<', '&lt;')
              .replace(/\r?\n/, '<br />');
      },
      showOnOff(onNode, offNode) {
          onNode.classList.add('show');
          onNode.classList.remove('hidden');
          offNode.classList.add('hidden');
          offNode.classList.remove('show');
      },
  };
  $(document).ready(() => {
      submitButton = document.querySelector('form input[type="submit"]');
      submitButton.disabled = true;
      wordField = document.querySelector('form input#word');
      const view = new View();
      const model = new Model(view);
      view.setModel(model);
      model.initialize();
      model.setGameStateID(<%= game_state.id %>);
      const keyboard = document.getElementById("keyboard-cont");
      document.addEventListener("keyup", (e) => {
          view.keyHandler(e);
      });
      keyboard.addEventListener("click", (e) => {
          if (e.target.nodeName === "BUTTON") {
              const command = e.target.textContent;
              if (command) {
                  e.key = command;
                  view.keyHandler(e);
              } else {
                  console.log(`Clicked button has no textContent`);
              }
          }
          console.log(`Ignoring click on non-button ${ e.target.nodeName }`);
      });
      keyboard.addEventListener('dblclick', (e) => {
          e.stopPropagation();
          e.preventDefault();
      });
  });
</script>
